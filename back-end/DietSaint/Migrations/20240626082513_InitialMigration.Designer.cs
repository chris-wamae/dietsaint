// <auto-generated />
using DietSaint.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DietSaint.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240626082513_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DietSaint.Models.EnergyNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Carbohydrate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("Lactose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Starch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sugars")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("EnergyNutrients");
                });

            modelBuilder.Entity("DietSaint.Models.Mineral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calcium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("Iron")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Magnesium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Potassium")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zinc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Minerals");
                });

            modelBuilder.Entity("DietSaint.Models.UngroupedNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fiber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("Protein")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Water")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("UngroupedNutrients");
                });

            modelBuilder.Entity("DietSaint.Models.Vitamin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FoodId")
                        .HasColumnType("int");

                    b.Property<string>("VitaminA")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitaminB6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitaminC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FoodId")
                        .IsUnique();

                    b.ToTable("Vitamins");
                });

            modelBuilder.Entity("Models.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Foods");
                });

            modelBuilder.Entity("DietSaint.Models.EnergyNutrient", b =>
                {
                    b.HasOne("Models.Food", "Food")
                        .WithOne("EnergyNutrient")
                        .HasForeignKey("DietSaint.Models.EnergyNutrient", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DietSaint.Models.Mineral", b =>
                {
                    b.HasOne("Models.Food", "Food")
                        .WithOne("Mineral")
                        .HasForeignKey("DietSaint.Models.Mineral", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DietSaint.Models.UngroupedNutrient", b =>
                {
                    b.HasOne("Models.Food", "Food")
                        .WithOne("UngroupedNutrient")
                        .HasForeignKey("DietSaint.Models.UngroupedNutrient", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("DietSaint.Models.Vitamin", b =>
                {
                    b.HasOne("Models.Food", "Food")
                        .WithOne("Vitamin")
                        .HasForeignKey("DietSaint.Models.Vitamin", "FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("Models.Food", b =>
                {
                    b.Navigation("EnergyNutrient")
                        .IsRequired();

                    b.Navigation("Mineral")
                        .IsRequired();

                    b.Navigation("UngroupedNutrient")
                        .IsRequired();

                    b.Navigation("Vitamin")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
